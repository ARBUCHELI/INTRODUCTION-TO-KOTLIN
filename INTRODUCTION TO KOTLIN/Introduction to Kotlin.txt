# INTRODUCTION TO KOTLIN
------------------------
* What is Kotlin?
-----------------
Welcome to the world of coding with Kotlin!

Kotlin is a programming language that, after its release in 2016 by JetBrains, quickly gained popularity amongst developers due to its concise syntax, additional safety features, and 
compatibility with the Java programming language.

Being a general-purpose programming language, Kotlin can be used for Android development, web development, data science, and more. In 2019, Google announced Kotlin as their preferred 
language for Android development.

The following applications use Kotlin in their tech stack:

	. Netflix
	. Duolingo
	. Pinterest
	. And more!

Throughout this lesson, we’ll learn about Kotlin syntax and how to run a basic program.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

* First Kotlin Program
----------------------
What better way to start learning about Kotlin than to run a Kotlin program? Before we run our first program, let’s take a moment to understand our current environment.

Code is written and edited in something called a code editor. The code editor for a Codecademy exercise lives in the middle of the screen. If we look at the top of the editor, we will see 
the file name Hello.kt. The .kt extension signifies that the file contains Kotlin code.

In our code editor, there is a short Kotlin program:

fun main() {
  println("Hello, World!")
}

Don’t worry about understanding what this code means yet. All this program does is print the text "Hello, World!" to the output terminal, which exists on the right side of our screen. 
When we click Run, the output terminal displays our code’s final output.

We’ll be checking the output terminal a lot to ensure our code works as expected.

* Instructions
--------------
Checkpoint 1 Passed
1.
Hit Run to execute our first Kotlin program.


Hint
After hitting Run, the following result should appear in the output terminal:

Hello, World!

Hello.kt
--------
fun main() {
  println("Hello, World!")
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

The main() Function
-------------------
Think of writing code like going on an adventure: we always need to start somewhere.

In Kotlin, the journey begins in the main() function.

The main() function is the “jumping off” point for our code and is the first part of our program that will execute when we run our program. It will exist in every single Kotlin project we 
create; in fact, without a main() function present, the program will return an error.

The syntax for the main() function looks like this:

fun main() {
  // Code will go here
}

	. fun is a Kotlin keyword that is used to declare a function.

	. main is the required name of the starting function.

	. Following the function name is a pair of empty parentheses ().

Code that is written inside the curly brackets ({ }) is considered the “body” of a function. When we hit Enter to create a new line of code inside the body, the code will automatically 
indent itself:

fun main() {
  println("Hello, World!")
}

* Instructions
--------------
Checkpoint 1 Passed
1.
In Main.kt, create the main() function.

Leave the body empty for now.


Hint
The syntax to create the main() function looks like this:

fun main() {

}

When creating the main() function, be sure to include:

	. The fun keyword

	. The name of the function: main
	
	. A pair of empty parentheses

	. Brackets: { and }

Checkpoint 2 Passed
2.
Add the following code to the body of the main() function:

println("Coding is fun!")


Hint
Add the code to the body of the main function:

fun main() {
  println("Coding is fun!")
}

Main.kt
-------
// Add your code below
fun main() {
  println("Coding is fun!")
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Print Statements
------------------
In the last exercise, we were able to display the text Coding is fun! in the output terminal with the following code:

fun main() {
  println("Coding is fun!")
}

We accomplished this feat using a print statement. A print statement outputs values to the terminal.

When we want to use a print statement in Kotlin, we use the println() function, which prints a value before creating a new line in the output terminal:

println("To infinity and beyond!")

Any value we want to print needs to be placed within the parentheses of the println() statement. If we want to output text, we need to contain the text in double quotes (""). The code in 
the snippet above will output:

To infinity and beyond!

We can even use print statements to output number values and the result of expressions. For example:

println(5 + 5)

Will have an output of:

10

We’ll mainly use println() throughout this course; however, there is another option for printing values to the output terminal: print().

The difference between println() and print() is that println() creates a new line after outputing a value, while print() doesn’t. For example:

println("One")
print("Two")
print("Three")

Will output:

One
TwoThree

* Instructions
--------------
Checkpoint 1 Passed
1.
In Print.kt, use println() to output "Just keep swimming!"


Hint
When using println() to output text, wrap the text in double-quotes(""):

println("I am a text-based output!")

This will output

I am a text-based output!

Checkpoint 2 Passed
2.
In Print.kt, use print() to output the expression 15 * 4.


Hint
Place the value or expression inside the parentheses of the print statement:

print(9 + 1)

This will output:

10

Print.tk
--------
fun main() {
  // Write your code below!
  println("Just keep swimming!")
  print(15 * 4)
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Order of Execution
--------------------
Similar to instructions in a recipe, code is read, compiled, and executed in a top-down order.

When we run a program, a compiler translates our Kotlin code into something that can be read by the Java Virtual Machine (JVM). The JVM is responsible for executing code as instructions.

All of this happens behind the scenes between running our code and seeing its output in the terminal.

Inside the main() function, the top line of the code is the first instruction that gets read by the compiler. For example, let’s create a program that contains three print statements:

fun main() {
  println("Huzzah!")
  println("Woohoo!")
  println("Yehaw!") 
}

In the snippet above, the print statement containing "Huzzah!" is the first line of code in the main() function; therefore, it will be printed to the output terminal first followed by 
"Woohoo!" and then "Yehaw!":

Huzzah!
Woohoo!
Yehaw!

* Instructions
--------------
Checkpoint 1 Passed
1.
Use println() to create a timeline for The Great Emu War of 1932.

Use the following text to create 3 print statements:

	. "11/2 - AU military goes to war against local emus."

	. "11/4 - Ambush planned by military fails."

	. "11/8 - AU military withdraws."

The content of the print statements must appear in the correct time order.


Hint
The print statements must appear in a specific order:

	1. "11/2 - AU military goes to war against local emus."

	2. "11/4 - Ambush planned by military fails."

	3. "11/8 - AU military withdraws."

Order.kt
--------
fun main() {
  // Add your code below
  println("11/2 - AU military goes to war against local emus.")
  println("11/4 - Ambush planned by military fails.")
  println("11/8 - AU military withdraws.")
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Comments
----------
Documenting what our code is accomplishing is a good programming practice because it makes our code understandable for both the programmer and anyone else who reads it.

Comments allow us to write documentation inside of our programs. Comments can be written anywhere throughout a program and can contain text, symbols, or even code - all of which will be 
ignored by the compiler.

To write a single-line comment, type // into the program followed by the comment we want to add:

// To be or not to be: that is the question.

// symbolizes the start of a comment. Note how text that appears in a comment has a gray font-color.

We also have the option of using a multiline comment which allows us to write comments throughout multiple lines. Multiline comments start with /* and end with */:

/*
If you prick us, do we not bleed?
If you tickle us, do we not laugh? 
If you poison us, do we not die? 
And if you wrong us, shall we not revenge?

- William Shakespeare, The Merchant of Venice 
*/

* Instructions
--------------
Checkpoint 1 Passed
1.
Add the following text as a single-line comment in Comments.kt:

Code prints "Howdy, partner!" to the terminal.


Hint
Single-line comments start with //:

// This is a single-line comment

Checkpoint 2 Passed
2.
Create a multiline comment that describes what you have learned so far about programming with Kotlin.


Hint
A multiline comment starts with /* and ends with */:

/*
This
   is
     a
      multiline
           comment
*/

* Comments.tk
-------------
fun main() {
  //Code prints "Howdy, partner!" to the terminal.
  /*Kotlin is a multipurpose programming language, used mainly in the development of mobile apps*/
  println("Howdy, partner!") 
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Errors and Bugs
-----------------
While every programmer is different, there is one experience we all share: getting an error message. An error, or bug, causes our programs to behave in unexpected ways.

When we receive an error message, it’s almost always because of something we wrote incorrectly in our code. As a result, the compiler cannot translate our program and returns an error 
message.

There are many different kinds of errors we can encounter. This may sound daunting, but luckily the Kotlin compiler provides accurate and descriptive error messages, allowing us to 
quickly and efficiently locate the issue.

For example, take a very close look at the following code:

fun main() {
  printlnn("To err is human.")
}

When we run this, we receive the following error:

Error.kt:2:3: error: unresolved reference: printlnn
  printlnn("To err is human.")
  ^

This error message provides a lot of useful information:

	. Error.kt is the name of the file that contains the bug.

	. The first number (2) tells us the line in which the error exists.

	. The second number (3) tells us the character number in which the error lives on that line.

	. The text following error: describes what error we are encountering.

We received this error because we wrote printlnn instead of println and the compiler couldn’t recognize the instruction.

Once we fix and rerun our code, we get the following output:

To err is human.

* Instructions
--------------
Checkpoint 1 Passed
1.
Run the code in Error.kt.

We will receive an error message.


Hint
When we run this code, we should receive the following error:

Error.kt:2:54: error: expecting ')'
  println("An error a day keeps the programmer away."
Checkpoint 2 Passed

2.
Read the error message and fix the code in the editor so that it can execute properly.

PS: Check the hint for additional help!


Hint
The error message states that it’s expecting ):

Error.kt:2:54: error: expecting ')'
  println("An error a day keeps the programmer away."
Looking at this message, we can deduce that the error exists on the 54th character of the second line in Error.kt.

Taking a closer look at this code, the closing parenthesis ) is missing. To fix this code, add ) at the end of the print statement.

Error.kt
--------
fun main() {
  println("An error a day keeps the programmer away.")
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Formatting Conventions
------------------------
In programming, formatting conventions are the suggested rules for how code should be structured in a specific programming language. By following Kotlin’s formatting standards, or coding 
conventions, we can drastically improve the readability of our programs.

Some of Kotlin’s formatting conventions include:

* Indentation:
--------------
Code within curly braces should be indented 4 spaces. While the Codecademy code editor generally uses 2 spaces, or 1 tab, for indentation, be sure to use 4 spaces when writing Kotlin code 
off-platform.

fun main() {
    // Code starts here
}

If we didn’t include indentation in our program, our code would still run without error; however, our code would look like a giant block of text making it hard to read. As programs get 
larger and more complicated, indentation for the purpose of organization becomes more essential.

* Comments:
-----------
When writing a comment, add a space (" ") between // and the start of the comment:

// Write your comment here

* Curly Brackets:
-----------------
When creating the main() function, place the opening curly bracket { on the same line as the main() function construct (in this case: fun main()). The closing bracket } should be placed 
on its own separate line and should be vertically aligned with the fun keyword:

fun main() { 
  // Code goes here
} 

Keep the above conventions in mind when writing Kotlin code throughout this course and off-platform. We’ll encounter more formatting conventions as we progress through this course. To 
learn more, check out the coding conventions in Kotlin’s Language Guide.

* Instructions
--------------
Take a look at the code in Syntax.kt.

It’s unformatted but produces no error. Take some time to format the code using different coding conventions.

Click Next when you’re ready to move on.

Syntax.kt
---------
fun main() 
{
  // Organize the code below
    println("Down by the bay")
    println("Where the watermelons grow,")
    println("Back to my home")
    println("I dare not go.");
    println("For if I do");
    println("My mother will say")
    println("Did you ever use an app that taught you how to snap?")
    println("Down by the bay!")
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------
































































































